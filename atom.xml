<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jack Q Blog</title>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://jack-q.github.io/blog/"/>
  <updated>2017-08-23T03:00:07.294Z</updated>
  <id>https://jack-q.github.io/blog/</id>
  
  <author>
    <name>Jack Q</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sign Git Commit with GPG</title>
    <link href="https://jack-q.github.io/blog/2017/08/06/sign-git-commit-with-gpg/"/>
    <id>https://jack-q.github.io/blog/2017/08/06/sign-git-commit-with-gpg/</id>
    <published>2017-08-06T02:39:05.000Z</published>
    <updated>2017-08-23T03:00:07.294Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;GPG, Gnu Privacy Guard, is a popular and wide used encryption tool
compatible to PGP (Pretty Good Privacy) tool. By using widely-accepted 
asymmetric encryption methods, GPG becomes an handy utility for
signing digital information with a personal or organizational credential
or securing private or sensitive message with high level encryption.&lt;/p&gt;
&lt;p&gt;This post is to integrate GPG with Git for more reliable and controllable source code management.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://jack-q.github.io/blog/tags/git/"/>
    
      <category term="gpg" scheme="https://jack-q.github.io/blog/tags/gpg/"/>
    
  </entry>
  
  <entry>
    <title>Install Global npm Package For Current User Without Privilege</title>
    <link href="https://jack-q.github.io/blog/2017/07/30/install-global-npm-package-for-current-user-without-privilege/"/>
    <id>https://jack-q.github.io/blog/2017/07/30/install-global-npm-package-for-current-user-without-privilege/</id>
    <published>2017-07-30T02:35:00.000Z</published>
    <updated>2017-08-03T02:41:56.967Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;NPM is the most used package manager for node.js and JavaScript ecosystems.
By using the global packages mechanism, a node.js package can be easily integrated 
into system shell and just works like a native command line utility (or even an 
desktop GUI program). However, by default, the global packages are installed as shared 
global packages across users and requires root privilege for maintenance, which may be
unavailable for general user and also expose potential conflict of packages between 
users. This post will cover simple configuration for npm global package for current 
user only.&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://jack-q.github.io/blog/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://jack-q.github.io/blog/tags/javascript/"/>
    
      <category term="npm" scheme="https://jack-q.github.io/blog/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>vector of bool in C++</title>
    <link href="https://jack-q.github.io/blog/2017/07/12/vector-of-bool-in-c/"/>
    <id>https://jack-q.github.io/blog/2017/07/12/vector-of-bool-in-c/</id>
    <published>2017-07-12T11:28:19.000Z</published>
    <updated>2017-08-19T07:46:13.746Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;C++ is an evolvement of C with shared design principles of performance first, 
yet with consideration of convenience at the perspective of programmer. 
However, the former generally requires to implement the most suitable and 
dedicated data structure (that is to optimize) for common cases. The specialization
results in inconsistency. This post is mainly about the &lt;code&gt;vector&lt;/code&gt; of &lt;code&gt;bool&lt;/code&gt;, which is 
a specialization of &lt;code&gt;vector&lt;/code&gt; according to the standard template library (STL) of C++.&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="https://jack-q.github.io/blog/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Service in ROS</title>
    <link href="https://jack-q.github.io/blog/2017/07/12/service-in-ros/"/>
    <id>https://jack-q.github.io/blog/2017/07/12/service-in-ros/</id>
    <published>2017-07-12T07:33:34.000Z</published>
    <updated>2017-08-23T03:04:26.000Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Followed by previous post covering message in ROS, this one introduce service in ROS.&lt;/p&gt;
&lt;p&gt;Service is another information exchange mechanism provided in ROS which 
provides RPC (remote procedure call) style request-response pattern.
The service is defined by &lt;code&gt;.srv&lt;/code&gt; file, which can be treated as a combination
of two message representing service request and service reply, respectively.&lt;/p&gt;
&lt;p&gt;Most of information in this post is refer to &lt;a href=&quot;http://wiki.ros.org/Services&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Services page in ROS wiki&lt;/a&gt;, &lt;a href=&quot;http://wiki.ros.org/srv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;srv page in ROS wiki&lt;/a&gt; and &lt;a href=&quot;https://github.com/ros/ros/blob/kinetic-devel/core/roslib/src/roslib/srvs.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code for ROS core module&lt;/a&gt;. &lt;/p&gt;
    
    </summary>
    
    
      <category term="ros" scheme="https://jack-q.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>Message in ROS</title>
    <link href="https://jack-q.github.io/blog/2017/07/12/message-in-ros/"/>
    <id>https://jack-q.github.io/blog/2017/07/12/message-in-ros/</id>
    <published>2017-07-12T02:06:00.000Z</published>
    <updated>2017-07-31T03:35:28.331Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Messages are spread across the whole system of a ROS instance,
which are the essence and physical base of communication and coordination 
in ROS system. The message is a serializable and platform agnostic (in the 
perspective of OS, programming language, etc) specification of structured data.&lt;/p&gt;
&lt;p&gt;Most of information in this post is refer to &lt;a href=&quot;http://wiki.ros.org/msg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;msg page in ROS wiki&lt;/a&gt; and &lt;a href=&quot;https://github.com/ros/ros/blob/kinetic-devel/core/roslib/src/roslib/msgs.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source code for ROS core module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A directly connected concept in ROS is &lt;em&gt;Topic&lt;/em&gt;, which is named bus for message exchange, which will be covered in later post. The &lt;em&gt;Service&lt;/em&gt; is also based on 
the infrastructure of message, which will be illustrated in next post.&lt;/p&gt;
    
    </summary>
    
    
      <category term="ros" scheme="https://jack-q.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>Configure ROS Environment</title>
    <link href="https://jack-q.github.io/blog/2017/07/07/configure-ros-environment/"/>
    <id>https://jack-q.github.io/blog/2017/07/07/configure-ros-environment/</id>
    <published>2017-07-06T16:33:42.000Z</published>
    <updated>2017-07-31T06:21:24.220Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ROS, the robot operation system, is a flexible environment for writing robot software.
It is not a traditional operating system but a software development framework including
a collection of tools, libraries, and conventions to manage and reduce the complexity 
of robotic systems.&lt;/p&gt;
&lt;p&gt;The following configurations are based on the following environment.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base: raw Ubuntu 16.04.2 amd64&lt;/li&gt;
&lt;li&gt;ROS release: Kinetic (to be installed)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="ros" scheme="https://jack-q.github.io/blog/tags/ros/"/>
    
  </entry>
  
  <entry>
    <title>DOT language for graph</title>
    <link href="https://jack-q.github.io/blog/2017/05/30/dot-language-for-graph/"/>
    <id>https://jack-q.github.io/blog/2017/05/30/dot-language-for-graph/</id>
    <published>2017-05-30T14:57:26.000Z</published>
    <updated>2017-05-30T12:23:25.333Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;GraphViz package is a set of tools to describe, automatically layout and manipulate graphs, which 
is of great significance in connection and relationship analysis and illustration.
The core module of GraphViz is the layout and render engines which generate 
neat and elegant visualization of graph in various common formats from 
a descriptive small language (the graph file language or the &lt;em&gt;DOT&lt;/em&gt; language). This post will represent a brief introduction
of the DOT language and show some applications that utilize the power of GraphViz.&lt;/p&gt;
    
    </summary>
    
    
      <category term="GraphViz" scheme="https://jack-q.github.io/blog/tags/graphviz/"/>
    
      <category term="visualization" scheme="https://jack-q.github.io/blog/tags/visualization/"/>
    
  </entry>
  
  <entry>
    <title>Simple Visualization in Python</title>
    <link href="https://jack-q.github.io/blog/2017/04/07/simple-visualization-in-python/"/>
    <id>https://jack-q.github.io/blog/2017/04/07/simple-visualization-in-python/</id>
    <published>2017-04-07T10:44:58.000Z</published>
    <updated>2017-05-30T10:17:25.785Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Visualization of data or graph can be achieved by a variety of means in Python. This post list 
configuration for some simple visualizations. Before introduction of some visualization package,
Iâ€™ll list some procedures for configure and launch the Jupyter notebook, which is a convenient
environment for testing Python code.&lt;/p&gt;
    
    </summary>
    
    
      <category term="visualization" scheme="https://jack-q.github.io/blog/tags/visualization/"/>
    
      <category term="python" scheme="https://jack-q.github.io/blog/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Setup LaTeX environment</title>
    <link href="https://jack-q.github.io/blog/2017/03/26/setup-latex-environment/"/>
    <id>https://jack-q.github.io/blog/2017/03/26/setup-latex-environment/</id>
    <published>2017-03-26T06:38:07.000Z</published>
    <updated>2017-05-16T14:22:52.328Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;After a reinstallation of ubuntu in last month, the original installation
of texlive 2015 was gone. As the 2016 release of texlive is already available 
to use, I decided to install the newer version on Ubuntu 16.04 LTS. This 
post records the steps of installation as well as some other 
configurations to several dedicated components.&lt;/p&gt;
    
    </summary>
    
    
      <category term="installation" scheme="https://jack-q.github.io/blog/tags/installation/"/>
    
      <category term="tex" scheme="https://jack-q.github.io/blog/tags/tex/"/>
    
  </entry>
  
  <entry>
    <title>Setup R environment</title>
    <link href="https://jack-q.github.io/blog/2017/03/25/setup-r-environment/"/>
    <id>https://jack-q.github.io/blog/2017/03/25/setup-r-environment/</id>
    <published>2017-03-25T05:08:52.000Z</published>
    <updated>2017-03-26T15:36:08.161Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;This post is to record the configuration steps of the R environment, 
which is a language as well as an eco-system for statistics and related 
computing and graphing. With the CRAN platform for sharing and exploring
extra package of R, the capibility of the R language is much more extented.&lt;/p&gt;
    
    </summary>
    
    
      <category term="R" scheme="https://jack-q.github.io/blog/tags/r/"/>
    
      <category term="installation" scheme="https://jack-q.github.io/blog/tags/installation/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 18</title>
    <link href="https://jack-q.github.io/blog/2017/03/12/javaee-training-note-day-18/"/>
    <id>https://jack-q.github.io/blog/2017/03/12/javaee-training-note-day-18/</id>
    <published>2017-03-12T06:16:12.000Z</published>
    <updated>2017-07-30T03:26:54.603Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Continued to the last post about the security settings related to website or 
web service, todayâ€™s topic is another vital security configuration for website,
which is the HTTP traffic over security socket layer (HTTP-SSL, HTTPS). 
Without the companies of the HTTPS configuration, either token based approach 
or the session based approach will become vulnerable to the package sniffers 
in the middle of the whole transfer processes.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 17</title>
    <link href="https://jack-q.github.io/blog/2017/03/10/javaee-training-note-day-17/"/>
    <id>https://jack-q.github.io/blog/2017/03/10/javaee-training-note-day-17/</id>
    <published>2017-03-10T06:10:58.000Z</published>
    <updated>2017-03-16T06:15:50.130Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;After building the core functionality of the project, the next step is to 
create an interface for the application to interact with the outter world.
However, in an open network, there are always unintented attempts to access 
our application without the authorization. Therefore, web application are 
always require authentication and authorization to secure itself. In this 
application, there are two modules used to secure different kinds of interfaces.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 16</title>
    <link href="https://jack-q.github.io/blog/2017/03/09/javaee-training-note-day-16/"/>
    <id>https://jack-q.github.io/blog/2017/03/09/javaee-training-note-day-16/</id>
    <published>2017-03-09T00:10:35.000Z</published>
    <updated>2017-07-30T03:27:48.065Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Todayâ€™s topic is about some debugging methods and toolkit used
to solve problems. One is the &lt;code&gt;tcpdump&lt;/code&gt; and other terminal 
tools for remote package sniffer and traffic analysis. Another is
some wired errors occurred in the development progress of project.&lt;/p&gt;
    
    </summary>
    
    
      <category term="network" scheme="https://jack-q.github.io/blog/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 15</title>
    <link href="https://jack-q.github.io/blog/2017/03/08/javaee-training-note-day-15/"/>
    <id>https://jack-q.github.io/blog/2017/03/08/javaee-training-note-day-15/</id>
    <published>2017-03-08T00:32:39.000Z</published>
    <updated>2017-07-15T14:48:42.286Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Todayâ€™s topic is some component library used together with ReactJS.
The React Motion is a UX improvement library named React Motion, which 
provides supports to transition animation.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://jack-q.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 14</title>
    <link href="https://jack-q.github.io/blog/2017/03/07/javaee-training-note-day-14/"/>
    <id>https://jack-q.github.io/blog/2017/03/07/javaee-training-note-day-14/</id>
    <published>2017-03-07T15:05:13.000Z</published>
    <updated>2017-07-30T03:29:45.105Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Todayâ€™s topic is continued to the day before yesterday. It is still about the ReactJS framework.
Based on the start point created on that day, today is to create the first component and then 
introduce the React Router library to solving the problem of routing inside the whole client 
side application in React.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://jack-q.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 13</title>
    <link href="https://jack-q.github.io/blog/2017/03/06/javaee-training-note-day-13/"/>
    <id>https://jack-q.github.io/blog/2017/03/06/javaee-training-note-day-13/</id>
    <published>2017-03-06T02:53:12.000Z</published>
    <updated>2017-07-30T03:31:47.845Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Todayâ€™s topic is some tips to the solution to the problems in 
development, varying from the frontend development to back-end 
persistence technology. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 12</title>
    <link href="https://jack-q.github.io/blog/2017/03/04/javaee-training-note-day-12/"/>
    <id>https://jack-q.github.io/blog/2017/03/04/javaee-training-note-day-12/</id>
    <published>2017-03-04T13:43:19.000Z</published>
    <updated>2017-03-07T16:06:42.889Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;A website (as well as other types of web applications) is gnenrally composited 
of frontend interface and backend service provider. Traditionally, when the website 
is the most fancy application of web, the frontend is static html pages genrated 
by http server. However, in the recent years, the AJAX technology and mobile platform
driven some kinds of new applications. The Single Page Application (SPA) is 
an envolved version of the original web page which is performed like a local application
while requires no binary installation process. Todayâ€™s topic is related to the 
ReactJS framework, a frontend solution to manage the SPA and more.&lt;/p&gt;
    
    </summary>
    
    
      <category term="react" scheme="https://jack-q.github.io/blog/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 11</title>
    <link href="https://jack-q.github.io/blog/2017/03/03/javaee-training-note-day-11/"/>
    <id>https://jack-q.github.io/blog/2017/03/03/javaee-training-note-day-11/</id>
    <published>2017-03-03T14:34:50.000Z</published>
    <updated>2017-03-05T13:53:30.649Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Tosayâ€™s topic is related to configuration of service in remote Linux server.
The target server is an ubuntu server 16.04. Following are some of configuration
steps.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 10</title>
    <link href="https://jack-q.github.io/blog/2017/03/02/javaee-training-note-day-10/"/>
    <id>https://jack-q.github.io/blog/2017/03/02/javaee-training-note-day-10/</id>
    <published>2017-03-02T13:13:39.000Z</published>
    <updated>2017-07-30T03:25:11.800Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;From this day, the training schedule goes to the coding stage of 
the development project. There will be no central topic of the notes,
but a set of records of problems and technics. &lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://jack-q.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE Training Note - Day 09</title>
    <link href="https://jack-q.github.io/blog/2017/03/01/javaee-training-note-day-09/"/>
    <id>https://jack-q.github.io/blog/2017/03/01/javaee-training-note-day-09/</id>
    <published>2017-03-01T09:53:56.000Z</published>
    <updated>2017-07-30T03:32:44.663Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Test is always one of the major steps in software engineering.
which is todayâ€™s topic. Some basic concepts is introduced 
several days ago when introducing the unit test supporting in 
Spring MVC framework. Todayâ€™s point is related to the management 
and theory approach of the test.&lt;/p&gt;
    
    </summary>
    
    
      <category term="java" scheme="https://jack-q.github.io/blog/tags/java/"/>
    
  </entry>
  
</feed>
